/*
 * MIT License
 *
 * Copyright (c) 2017 Andreas Guther
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* FIRST VERSION */

module v1 {

  @mutable
  enum UnionTypeDiscriminant {
    ONE,
    TWO
  };

  @nested
  @mutable
  struct StructOne {
    @id(1) long number;
  };

  @nested
  @mutable
  struct StructTwo {
    @id(1)
    long number;
    @id(2)
    string<128> text;
  };

  @nested
  @mutable
  union UnionType switch (UnionTypeDiscriminant) {
    case ONE:
      @id(1)
      StructOne one;
    case TWO:
      @id(2)
      StructTwo two;
  };

  @mutable
  struct MutableType {
    @key
    @id(1)
    long key;
    @id(2)
    UnionType unionType;
    @id(3)
    StructTwo arrayType[2];
    @id(4)
    sequence<StructTwo, 2> sequenceType;
    @id(10)
    string<255> text;
  };

};

/* SECOND VERSION */

module v2 {

  @mutable
  enum UnionTypeDiscriminant {
    ONE,
    TWO,
    THREE
  };

  @nested
  @mutable
  struct StructOne {
    @id(1)
    long number;
  };

  @nested
  @mutable
  struct StructTwo {
    @id(1)
    long number;
    @id(2)
    string<128> text;
  };

  @nested
  @mutable
  struct StructThree {
    @id(1)
    string<128> text;
  };

  @nested
  @mutable
  union UnionType switch (UnionTypeDiscriminant) {
    case ONE:
      @id(1)
      StructOne one;
    case TWO:
      @id(2)
      StructTwo two;
    case THREE:
      @id(3)
      StructThree three;
  };

  @mutable
  struct MutableType {
    @key
    @id(1)
    long key;
    @id(2)
    UnionType unionType;
    @id(3)
    StructTwo arrayType[2];
    @id(4)
    sequence<StructTwo, 2> sequenceType;
    @id(5)
    long newNumber;
    @id(10)
    string<255> text;
  };

};
