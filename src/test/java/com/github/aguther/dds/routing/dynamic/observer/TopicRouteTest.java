/*
 * MIT License
 *
 * Copyright (c) 2018 Andreas Guther
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 30 16:04:48 GMT 2017
 */

package com.github.aguther.dds.routing.dynamic.observer;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

public class TopicRouteTest {

  @Test(timeout = 4000)
  public void test00() throws Throwable {
    Direction topicRoute_Direction0 = Direction.IN;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, (String) null, (String) null);
    String string0 = topicRoute0.getType();
    assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01() throws Throwable {
    Direction topicRoute_Direction0 = Direction.IN;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, (String) null, " ^W4rU[x-kU");
    String string0 = topicRoute0.getType();
    assertEquals(" ^W4rU[x-kU", string0);
  }

  @Test(timeout = 4000)
  public void test02() throws Throwable {
    Direction topicRoute_Direction0 = Direction.OUT;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, "<`z$}P-z~PuA4OI$&", "yktd|VS wHZz)mhB7");
    String string0 = topicRoute0.getTopic();
    assertEquals("<`z$}P-z~PuA4OI$&", string0);
    assertEquals("yktd|VS wHZz)mhB7", topicRoute0.getType());
  }

  @Test(timeout = 4000)
  public void test03() throws Throwable {
    Direction topicRoute_Direction0 = Direction.OUT;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, "", "");
    String string0 = topicRoute0.getTopic();
    assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04() throws Throwable {
    Direction topicRoute_Direction0 = Direction.IN;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, (String) null, " ^W4rU[x-kU");
    Direction topicRoute_Direction1 = topicRoute0.getDirection();
    assertSame(topicRoute_Direction1, topicRoute_Direction0);
  }

  @Test(timeout = 4000)
  public void test05() throws Throwable {
    Direction topicRoute_Direction0 = Direction.IN;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, (String) null, (String) null);
    TopicRoute topicRoute1 = new TopicRoute(topicRoute_Direction0, (String) null, (String) null);
    boolean boolean0 = topicRoute0.equals(topicRoute1);
    assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06() throws Throwable {
    Direction topicRoute_Direction0 = Direction.OUT;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, "<`z$}P-z~PuA4OI$&", "yktd|VS wHZz)mhB7");
    TopicRoute topicRoute1 = new TopicRoute(topicRoute_Direction0, "<`z$}P-z~PuA4OI$&", "<`z$}P-z~PuA4OI$&");
    boolean boolean0 = topicRoute0.equals(topicRoute1);
    assertFalse(boolean0);
    assertEquals("<`z$}P-z~PuA4OI$&", topicRoute0.getTopic());
  }

  @Test(timeout = 4000)
  public void test07() throws Throwable {
    Direction topicRoute_Direction0 = Direction.OUT;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, "", "");
    Direction topicRoute_Direction1 = Direction.IN;
    TopicRoute topicRoute1 = new TopicRoute(topicRoute_Direction1, "E$=h0z.XQX>6D<zHO.", "");
    boolean boolean0 = topicRoute0.equals(topicRoute1);
    assertEquals("", topicRoute1.getType());
    assertFalse(boolean0);
    assertEquals("E$=h0z.XQX>6D<zHO.", topicRoute1.getTopic());
  }

  @Test(timeout = 4000)
  public void test08() throws Throwable {
    Direction topicRoute_Direction0 = Direction.IN;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, (String) null, " ^W4rU[x-kU");
    TopicRoute topicRoute1 = new TopicRoute(topicRoute_Direction0, "", "4L$w#r0T=D2P0cp");
    boolean boolean0 = topicRoute0.equals(topicRoute1);
    assertEquals("4L$w#r0T=D2P0cp", topicRoute1.getType());
    assertEquals("", topicRoute1.getTopic());
    assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09() throws Throwable {
    Direction topicRoute_Direction0 = Direction.IN;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, (String) null, (String) null);
    boolean boolean0 = topicRoute0.equals((Object) null);
    assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10() throws Throwable {
    Direction topicRoute_Direction0 = Direction.OUT;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, "", "");
    boolean boolean0 = topicRoute0.equals(topicRoute0);
    assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11() throws Throwable {
    Direction topicRoute_Direction0 = Direction.IN;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, (String) null, " ^W4rU[x-kU");
    boolean boolean0 = topicRoute0.equals("");
    assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12() throws Throwable {
    Direction topicRoute_Direction0 = Direction.IN;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, (String) null, (String) null);
    String string0 = topicRoute0.getTopic();
    assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13() throws Throwable {
    Direction topicRoute_Direction0 = Direction.OUT;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, "", "");
    String string0 = topicRoute0.getType();
    assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14() throws Throwable {
    Direction topicRoute_Direction0 = Direction.OUT;
    TopicRoute topicRoute0 = new TopicRoute(topicRoute_Direction0, "", "");
    topicRoute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15() throws Throwable {
    TopicRoute topicRoute0 = new TopicRoute((Direction) null, "", "");
    topicRoute0.getDirection();
  }
}
