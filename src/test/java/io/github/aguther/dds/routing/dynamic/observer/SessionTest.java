/*
 * MIT License
 *
 * Copyright (c) 2018 Andreas Guther
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 30 16:04:32 GMT 2017
 */

package io.github.aguther.dds.routing.dynamic.observer;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

public class SessionTest {

  @Test(timeout = 4000)
  public void test00() throws Throwable {
    Session session0 = new Session(Direction.OUT, (String) null);
    String string0 = session0.getTopic();
    assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01() throws Throwable {
    Session session0 = new Session(Direction.OUT, "t7;/", "t7;/");
    String string0 = session0.getTopic();
    assertEquals("t7;/", string0);
  }

  @Test(timeout = 4000)
  public void test02() throws Throwable {
    Session session0 = new Session(Direction.OUT, "", (String) null);
    String string0 = session0.getPartition();
    assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03() throws Throwable {
    Session session0 = new Session(Direction.OUT, "", "oL4h~,j_01ZnqMEo9^");
    String string0 = session0.getPartition();
    assertEquals("oL4h~,j_01ZnqMEo9^", string0);
    assertEquals("", session0.getTopic());
  }

  @Test(timeout = 4000)
  public void test04() throws Throwable {
    Session session0 = new Session(Direction.OUT, "", "");
    Session session1 = new Session(Direction.OUT, "", "");
    boolean boolean0 = session0.equals(session1);
    assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05() throws Throwable {
    Session session0 = new Session(Direction.OUT, "");
    Session session1 = new Session(Direction.OUT, "", "Fo|j");
    boolean boolean0 = session0.equals(session1);
    assertEquals("", session1.getTopic());
    assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06() throws Throwable {
    Session session0 = new Session(Direction.OUT, "");
    Session session1 = new Session(Direction.OUT, (String) null, "");
    boolean boolean0 = session0.equals(session1);
    assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07() throws Throwable {
    Session session0 = new Session(Direction.OUT, "");
    boolean boolean0 = session0.equals((Object) null);
    assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08() throws Throwable {
    Session session0 = new Session(Direction.OUT, "");
    boolean boolean0 = session0.equals(session0);
    assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09() throws Throwable {
    Session session0 = new Session(Direction.OUT, "");
    boolean boolean0 = session0.equals("");
    assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10() throws Throwable {
    Session session0 = new Session(Direction.OUT, "");
    String string0 = session0.getTopic();
    assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11() throws Throwable {
    Session session0 = new Session(Direction.OUT, "");
    session0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12() throws Throwable {
    Session session0 = new Session(Direction.OUT, "");
    String string0 = session0.getPartition();
    assertEquals("", string0);
  }
}
